/**
 * Created by kevin on 10/25/2015.
 */
// backbone-custom.js file:
define(['jquery', 'underscore','loglevel','backbone'], function ($, _, log, Backbone) {


    /**
     * generate a UUID
     * @method getUUID
     * @link http://stackoverflow.com/questions/105034/create-guid-uuid-in-javascript
     */
    Backbone.Collection.prototype.getUUID = function(){
        var result = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
            var r = Math.random()*16|0, v = c == 'x' ? r : (r&0x3|0x8);
            return v.toString(16);
        });
        return result;
    };


    /**
     bind pubsub to the body tag
     @method _bindPubSub
     @param {string} channel_name name for the pubsub binding, will only respond to messages with data property ("channel":name)
     @param {function} callcack function to execute when pubsub event fires
     @param {string} selector option html jquery selector for the binding
    */
    Backbone.View.prototype._bindPubSub = function(channel_name, callback, selector){
        try {
            var $target = null;
            if (!_.isString(name)){
                throw new Error('Invalid parameter "binding name"');
            }
            if (!_.isString(selector)){
                selector = 'body';
            }
            var $target = $(selector);
            if ($target && $target.length) {
                var attr_name = 'data-pubsub-' + channel_name + '-bound';
                var attr_value = $target.attr(attr_name);
                if (!_.isString(attr_value) || attr_value !== 'true') {
                    $target.on('pubsub:message', function (e, data) {
                        if ( _.isObject(data) && _.has(data, 'channel') && data.channel === channel_name){
                            log.info(channel_name+' heard the message' + JSON.stringify(data))
                            if (_.isFunction(callback)) {
                                callback(data);
                            }
                        }
                    });
                    $target.attr(attr_name, 'true');
                }
            }
            else{
                throw new Error('Unable to bind to HTML element "body"');
            }
        }
        catch(e){
            log.warn('Warning: '+ e.message+' - _bindPubSub::Backbone');
        }
    };


    /**
     emit a pubsub message to the body tag
     @method _sendMsg
     @param {string} channel_name name for the pubsub binding, will only respond to messages with data property ("channel":name)
     @param {object|string} message
     @param {string} selector option html jquery selector for the message to be sent to
    */
    Backbone.View.prototype._sendMsg = function(channel_name, message, selector){
        try {
            var $target = null;
            if (!_.isString(name)){
                throw new Error('Invalid parameter "binding name"');
            }
            if (!_.isString(selector)){
                selector = 'body';
            }
            var $target = $(selector);
            if ($target && $target.length) {
                if (_.isString(channel_name)){
                    $target.trigger(channel_name, message);
                }
            }
            else{
                throw new Error('Unable to bind to HTML element "body"');
            }
        }
        catch(e){
            log.warn('Warning: '+ e.message+' - _sendMsg::Backbone');
        }


    };


    // Add 'one' event listener method to Backbone.Events
    // https://github.com/bolasblack/backbone.event.one/blob/master/lib/backbone.event.one.js
    // Generated by CoffeeScript 1.3.3
    (function() {

        (function(_, Backbone) {
            var objName, one, _i, _len, _ref, _results;
            if (Backbone == null) {
                return;
            }
            one = function(events, handler, context, whenFilter) {
                var fn, k, v, _i, _len, _ref,
                    _this = this;
                if (typeof events === "object") {
                    for (k in events) {
                        v = events[k];
                        this.one(k, v, handler, context, whenFilter);
                    }
                    return this;
                } else if (/\s+/.test(events)) {
                    _ref = events.split(/\s+/);
                    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                        k = _ref[_i];
                        this.one(k, handler, context, whenFilter);
                    }
                    return this;
                }
                if (_.isFunction(context)) {
                    whenFilter = context;
                    context = this;
                }
                if (context == null) {
                    context = this;
                }
                if (whenFilter == null) {
                    whenFilter = function() {
                        return true;
                    };
                }
                fn = function() {
                    if (!whenFilter.apply(context, arguments)) {
                        return;
                    }
                    _this.off(events, fn, context);
                    return handler.apply(context, arguments);
                };
                return this.on(events, fn, context);
            };
            Backbone.Events.one = one;
            _ref = ["Model", "Collection", "View", "Router", "History"];
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                objName = _ref[_i];
                _results.push(_.extend(Backbone[objName].prototype, Backbone.Events));
            }
            return _results;
        })(_, Backbone);

    }).call(this);


    log.info('Backbone Override Loaded');
    return Backbone;
});